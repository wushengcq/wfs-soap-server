package edu.asu.ows.secure;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;

import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.jaxws.JaxWsProxyFactoryBean;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.handler.WSHandlerConstants;

import edu.asu.ows.Utils;
import edu.asu.ows.wfs.WfsPortType;
import net.opengis.wfs._2.DescribeFeatureTypeType;
import net.opengis.wfs._2.GetCapabilitiesType;
import net.opengis.wfs._2.GetFeatureType;

public class EncryptHelper {

	private ByteArrayOutputStream _out = new ByteArrayOutputStream();
	
	public void encryptSoap(String user, String requestXml) {
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();

		// Use the URL defined in the soap address portion of the WSDL
		factory.setAddress("http://localhost:8291/services/ows/wfs/soap/1.2/encrypt");

		// Utilize the class which was auto-generated by Apache CXF wsdl2java
		factory.setServiceClass(edu.asu.ows.wfs.WfsPortType.class);
		Object client = factory.create();

		// Adding Logging Interceptors
		//out.reset();
		PrintWriter writer = new PrintWriter(_out);
		LoggingOutInterceptor loggingOutInterceptor = new LoggingOutInterceptor();
		loggingOutInterceptor.setPrintWriter(writer);
		ClientProxy.getClient(client).getOutInterceptors().add(loggingOutInterceptor);

		LoggingInInterceptor loggingInInterceptor = new LoggingInInterceptor();
		loggingInInterceptor.setPrettyLogging(true);
		ClientProxy.getClient(client).getInInterceptors().add(loggingInInterceptor);

		// Set up WS-Security Encryption
		// Reference: https://ws.apache.org/wss4j/using.html
		Map<String, Object> props = new HashMap<String, Object>();
		props.put(WSHandlerConstants.USER, user);
		props.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN + " " + WSHandlerConstants.TIMESTAMP
				+ " " + WSHandlerConstants.ENCRYPT);
		props.put(WSHandlerConstants.PASSWORD_TYPE, "PasswordDigest");
		props.put(WSHandlerConstants.ENC_PROP_FILE, "clientKeystore.properties");
		props.put(WSHandlerConstants.ENCRYPTION_PARTS, "{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body");
		props.put(WSHandlerConstants.PW_CALLBACK_CLASS, PasswordCallback.class.getName());

		WSS4JOutInterceptor wss4jOut = new WSS4JOutInterceptor(props);
		ClientProxy.getClient(client).getOutInterceptors().add(wss4jOut);

		this.sendRequest((WfsPortType) client, requestXml);
	}
	
	private void sendRequest(WfsPortType client, String requestXml) {
		try {
			if (requestXml.startsWith("<GetCapabilities")) {
				GetCapabilitiesType request = Utils.unmarshal(GetCapabilitiesType.class, requestXml);			
				client.getCapabilities(request);
			} else if (requestXml.startsWith("<DescribeFeatureType")) {
				DescribeFeatureTypeType request = Utils.unmarshal(DescribeFeatureTypeType.class, requestXml);
				client.describeFeatureType(request);
			} else if (requestXml.startsWith("<wfs:GetFeature")) {
				GetFeatureType request = Utils.unmarshal(GetFeatureType.class, requestXml);
				client.getFeature(request);
			}			
		} catch (Exception e) {
			//System.out.println(e.getMessage());
		} 
	}
	
	public String getEncyptRequest() throws IOException {
		StringReader in = new StringReader(new String(this._out.toByteArray()));
		//System.out.println(new String(this._out.toByteArray()));
		BufferedReader reader = new BufferedReader(in);
		String line = null;
		while((line = reader.readLine()) != null) {
			//System.out.println(line);
			if (line.startsWith("Payload: ")) {
				return line.substring("Payload: ".length());
			}
		}
		return null;
	}
}
